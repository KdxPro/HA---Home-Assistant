      - addressable_lambda:
          name: "Kdx's Custom Effect - Fire"
          update_interval: 17ms
          lambda: |-

            static const uint8_t ignProb = 5;
            static float lambda_u = 0;
            static float lambda_s = 0;
            static float lambda_f = 0;
            static const uint8_t nrOfLedsFTab = 110*2;

            static float ignTab_u[ignProb] = {0, 55, 55, 55, 110};
            static float ignTab_s[ignProb] = {0};
            static float ignTab_u_new[ignProb] = {55, 55, 55, 55, 55};
            static float ignTab_s_new[ignProb] = {0};
            static float ignTab_u_base[ignProb] = {0};
            static float ignTab_u_base_diff = it.size()/((float)(ignProb-1));
            static int16_t u = 0, s = 0;

            static const uint8_t fNr = 3;
            static float fTab[fNr][nrOfLedsFTab] = {0};
            static float sFTab[fNr] = {5,8,10};
            static float uFTab = nrOfLedsFTab/2;

            static float led_tab[110] = {0};

            static uint8_t i = 0, i2 = 0;
            static uint8_t t = 0;
            static float f_new = 0;
            float randh = 0;
            static uint8_t offs = 0;

            static uint8_t red = 0;
            static uint8_t green = 0;
            static uint8_t blue = 0;

            auto rv = id(neopixel_light).remote_values;
            red = rv.get_red()*255;
            green = rv.get_green()*255;
            blue = rv.get_blue()*255;

            static uint8_t init_cycle = 0;

            for(i = 0; i < nrOfLedsFTab && !init_cycle; i++)
            {
              for(i2 = 0; i2 < fNr; i2++)
                fTab[i2][i] = pow(2,-1*pow((i-uFTab)/sFTab[i2],2));
              
              id(neopixel_light).remote_values.set_red(1.0f);
              id(neopixel_light).remote_values.set_green(0.4f);
              id(neopixel_light).remote_values.set_blue(0.0f);
            }

            for(i = 0; i < ignProb && !init_cycle; i++)
              ignTab_u_base[i] = i*ignTab_u_base_diff;

            init_cycle = 1;

            if (id(G_INT_init))
            {
              for(i = 0; i < it.size(); i++)
                led_tab[i] = 0;

              for(i = 0; i < ignProb; i++)
              {
                ignTab_s[i] = 1;
                ignTab_u_new[i] = 55;
                ignTab_s_new[i] = 0;
              }

              ignTab_u[0] = 0;
              ignTab_u[1] = 0;
              ignTab_u[2] = 55;
              ignTab_u[3] = 110;
              ignTab_u[4] = 110;

              lambda_u = 0.03;
              lambda_f = 0.01;

              id(G_INT_init) = 0;
            }
            
            if(t++ == 200)
            {
              for(i = 0; i < ignProb; i++)
              {
                ignTab_u_new[i] = ignTab_u_base[i] + ((rand() % 200 - 100)*ignTab_u_base_diff)/100.0f;
                
                if(ignTab_u_new[i] < 0) ignTab_u_new[i] = 0;
                if(ignTab_u_new[i] >= it.size()) ignTab_u_new[i] = it.size();

                ignTab_s_new[i] = (rand() % fNr);
                lambda_u = 0.01;
                lambda_f = 0.005;
              }
              t = 0;
            }

            for(i = 0; i < ignProb; i++)
            {
              ignTab_u[i] = ignTab_u[i]*(1.0f-lambda_u) + ignTab_u_new[i]*lambda_u;
              ignTab_s[i] = ignTab_s[i]*(1.0f-lambda_s) + ignTab_s_new[i]*lambda_s;
            }

            randh = 1.0f + (rand() % 100 - 50.0f) * 0.0003f;

            for(i = 0; i < it.size(); i++)
            {

              for(i2 = 0; i2 < ignProb; i2++)
              {
                u = round(ignTab_u[i2]);
                s = round(ignTab_s[i2]);

                offs = it.size() - u;
                f_new = fTab[s][i+offs]*ignProb;

                led_tab[i] = (led_tab[i]*(1-lambda_f) + f_new*lambda_f) * randh;
                
              }
              if(led_tab[i] > 1) led_tab[i] = 1;
            }

            for(i = 0; i < it.size(); i++)
              it[i] = Color(led_tab[i]*red,led_tab[i]*green,led_tab[i]*blue);